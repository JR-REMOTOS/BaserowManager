import UIManager from"./ui.js";import BaserowAPI from"./api.js";import{BASEROW_CONFIGS,TABLE_ICONS}from"./config.js";import Utils,{ValidationUtils,FormatUtils,DOMUtils,DataUtils}from"./utils.js";class BaserowManager{constructor(){this.ui=new UIManager;this.api=this.ui.api;this.currentTable=null;this.editingRowId=null;this.isInitialized=false}async init(){if(this.isInitialized)return;try{console.log("[App] Inicializando aplicação...");if(document.readyState==="loading"){console.log("[App] Aguardando DOM...");await new Promise(resolve=>document.addEventListener("DOMContentLoaded",resolve));console.log("[App] DOM carregado")}console.log("[App] Inicializando UI...");this.ui.init();console.log("[App] UI inicializada");this.setupGlobalHandlers();window.app=this;console.log("[App] Escondendo loading state...");const appLoading=document.getElementById("appLoading");const appContainer=document.getElementById("appContainer");if(appLoading&&appContainer){appLoading.classList.add("d-none");appContainer.classList.remove("d-none")}else{console.error("[App] Elementos appLoading ou appContainer não encontrados")}this.isInitialized=true;console.log("[App] Aplicação inicializada com sucesso")}catch(error){console.error("[App] Erro na inicialização:",error);this.ui.showAlert("Erro ao inicializar aplicação: "+error.message,"danger");const appLoading=document.getElementById("appLoading");if(appLoading)appLoading.classList.add("d-none")}}setupGlobalHandlers(){window.addEventListener("unhandledrejection",event=>{console.error("[App] Promise rejeitada:",event.reason);this.ui.showAlert("Erro inesperado: "+event.reason?.message||"Erro desconhecido","warning");event.preventDefault()});window.addEventListener("error",event=>{console.error("[App] Erro JavaScript:",event.error)});this.initBootstrapComponents()}initBootstrapComponents(){const tooltipTriggerList=[].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));tooltipTriggerList.map(function(tooltipTriggerEl){return new bootstrap.Tooltip(tooltipTriggerEl)});const popoverTriggerList=[].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));popoverTriggerList.map(function(popoverTriggerEl){return new bootstrap.Popover(popoverTriggerEl)})}async selectTable(tableId,tableName){try{await this.ui.selectTable(tableId,tableName);this.currentTable={id:tableId,name:tableName}}catch(error){console.error("[App] Erro ao selecionar tabela:",error);this.ui.showAlert("Erro ao selecionar tabela: "+error.message,"danger")}}showAddForm(){if(!this.currentTable){this.ui.showAlert("Selecione uma tabela primeiro","warning");return}this.editingRowId=null;this.renderRecordForm("Adicionar Novo Registro","fas fa-plus-circle")}async editRecord(rowId){if(!this.currentTable){this.ui.showAlert("Nenhuma tabela selecionada","warning");return}try{this.ui.showLoading();const record=await this.api.getRecord(this.currentTable.id,rowId);this.editingRowId=rowId;this.renderRecordForm("Editar Registro","fas fa-edit",record);this.ui.hideLoading()}catch(error){this.ui.hideLoading();console.error("[App] Erro ao carregar registro:",error);this.ui.showAlert("Erro ao carregar registro: "+error.message,"danger")}}renderRecordForm(title,icon,data={}){const formTitle=document.getElementById("formTitle");const formFields=document.getElementById("formFields");const recordForm=document.getElementById("recordForm");if(!formTitle||!formFields||!recordForm){console.error("[App] Elementos do formulário não encontrados");return}formTitle.innerHTML=`<i class="${icon} me-2"></i>${title}`;formFields.innerHTML=this.ui.tableFields.filter(field=>field.name!=="id"&&!field.read_only).map(field=>this.renderFormField(field,data[field.name])).join("");recordForm.style.display="block";recordForm.scrollIntoView({behavior:"smooth"})}renderFormField(field,value=""){const fieldName=field.name;const fieldId=`field_${fieldName.replace(/\s+/g,"_")}`;let input;if(field.type==="number"){input=`<input type="number" class="form-control" id="${fieldId}" value="${value||0}" min="0">`}else if(field.type==="boolean"){input=`\n                <select class="form-control" id="${fieldId}">\n                    <option value="false" ${value===false?"selected":""}>Não</option>\n                    <option value="true" ${value===true?"selected":""}>Sim</option>\n                </select>\n            `}else if(field.type==="date"){const dateValue=value?new Date(value).toISOString().split("T")[0]:"";input=`<input type="date" class="form-control" id="${fieldId}" value="${dateValue}">`}else if(field.type==="long_text"||fieldName.toLowerCase().includes("sinopse")){input=`<textarea class="form-control" id="${fieldId}" rows="3" placeholder="Digite ${fieldName.toLowerCase()}...">${value||""}</textarea>`}else if(fieldName.toLowerCase().includes("email")){input=`<input type="email" class="form-control" id="${fieldId}" value="${value||""}" placeholder="exemplo@email.com">`}else if(fieldName.toLowerCase().includes("link")||fieldName.toLowerCase().includes("url")){input=`<input type="url" class="form-control" id="${fieldId}" value="${value||""}" placeholder="https://exemplo.com">`}else if(fieldName.toLowerCase().includes("senha")||fieldName.toLowerCase().includes("password")){input=`<input type="password" class="form-control" id="${fieldId}" value="${value||""}" placeholder="Digite a senha">`}else{input=`<input type="text" class="form-control" id="${fieldId}" value="${value||""}" placeholder="Digite ${fieldName.toLowerCase()}...">`}const isRequired=field.primary||fieldName.toLowerCase().includes("nome")||fieldName.toLowerCase().includes("email");const requiredMark=isRequired?'<span class="text-danger">*</span>':"";return`\n            <div class="col-md-6 mb-3">\n                <label class="form-label fw-bold" for="${fieldId}">\n                    ${fieldName} ${requiredMark}\n                </label>\n                ${input}\n                <div class="invalid-feedback" id="${fieldId}_error"></div>\n            </div>\n        `}async saveRecord(){if(!this.currentTable){this.ui.showAlert("Nenhuma tabela selecionada","warning");return}try{const formData=this.collectFormData();const validation=this.validateFormData(formData);if(!validation.valid){this.showValidationErrors(validation.errors);return}this.ui.showLoading();let result;if(this.editingRowId){result=await this.api.updateRecord(this.currentTable.id,this.editingRowId,formData);this.ui.showAlert("Registro atualizado com sucesso!","success")}else{result=await this.api.createRecord(this.currentTable.id,formData);this.ui.showAlert("Registro criado com sucesso!","success")}this.hideRecordForm();await this.ui.fetchRecords(this.ui.currentPage);this.ui.hideLoading()}catch(error){this.ui.hideLoading();console.error("[App] Erro ao salvar registro:",error);this.ui.showAlert("Erro ao salvar registro: "+error.message,"danger")}}collectFormData(){const formData={};this.ui.tableFields.filter(field=>field.name!=="id"&&!field.read_only).forEach(field=>{const fieldId=`field_${field.name.replace(/\s+/g,"_")}`;const element=document.getElementById(fieldId);if(element){let value=element.value;if(field.type==="boolean"){value=value==="true"}else if(field.type==="number"&&value){value=parseFloat(value)}else if(field.type==="date"&&value){value=new Date(value).toISOString()}formData[field.name]=value||null}});return formData}validateFormData(formData){const errors={};let valid=true;Object.keys(formData).forEach(fieldName=>{const value=formData[fieldName];const field=this.ui.tableFields.find(f=>f.name===fieldName);if(!field)return;if(fieldName.toLowerCase().includes("email")&&value){const emailValidation=ValidationUtils.validateField(fieldName,value,"email");if(!emailValidation.valid){errors[fieldName]=emailValidation.message;valid=false}}if((fieldName.toLowerCase().includes("link")||fieldName.toLowerCase().includes("url"))&&value){const urlValidation=ValidationUtils.validateField(fieldName,value,"url");if(!urlValidation.valid){errors[fieldName]=urlValidation.message;valid=false}}const isRequired=field.primary||fieldName.toLowerCase().includes("nome");if(isRequired&&(!value||value.toString().trim()==="")){errors[fieldName]="Este campo é obrigatório";valid=false}});return{valid:valid,errors:errors}}showValidationErrors(errors){document.querySelectorAll(".is-invalid").forEach(el=>el.classList.remove("is-invalid"));document.querySelectorAll(".invalid-feedback").forEach(el=>el.textContent="");Object.keys(errors).forEach(fieldName=>{const fieldId=`field_${fieldName.replace(/\s+/g,"_")}`;const element=document.getElementById(fieldId);const errorElement=document.getElementById(`${fieldId}_error`);if(element){element.classList.add("is-invalid")}if(errorElement){errorElement.textContent=errors[fieldName]}});this.ui.showAlert("Corrija os erros no formulário antes de continuar","warning")}async deleteRecord(rowId){if(!this.currentTable){this.ui.showAlert("Nenhuma tabela selecionada","warning");return}if(!confirm("Tem certeza que deseja excluir este registro? Esta ação não pode ser desfeita.")){return}try{this.ui.showLoading();await this.api.deleteRecord(this.currentTable.id,rowId);this.ui.showAlert("Registro excluído com sucesso!","success");await this.ui.fetchRecords(this.ui.currentPage);this.ui.hideLoading()}catch(error){this.ui.hideLoading();console.error("[App] Erro ao excluir registro:",error);this.ui.showAlert("Erro ao excluir registro: "+error.message,"danger")}}async confirmDeleteAll(){if(!this.currentTable){this.ui.showAlert("Nenhuma tabela selecionada","warning");return}const confirmation=prompt(`⚠️ ATENÇÃO: Esta ação irá excluir TODOS os ${this.ui.totalRecords} registros da tabela "${this.currentTable.name}".\n\n`+`Esta ação NÃO PODE ser desfeita!\n\n`+`Para confirmar, digite exatamente: EXCLUIR TUDO`);if(confirmation!=="EXCLUIR TUDO"){this.ui.showAlert("Operação cancelada","info");return}await this.deleteAllRecords()}async deleteAllRecords(){try{this.ui.showProgress("Excluindo Registros","Preparando exclusão...");const result=await this.api.deleteAllRecords(this.currentTable.id,(percentage,deleted,total)=>{this.ui.updateProgress(percentage,`Excluído ${deleted} de ${total} registros...`)});this.ui.hideProgress();if(result.deleted>0){this.ui.showAlert(`✅ ${result.deleted} registros excluídos com sucesso!`,"success");await this.ui.fetchRecords(1)}else{this.ui.showAlert("Nenhum registro encontrado para exclusão","info")}}catch(error){this.ui.hideProgress();console.error("[App] Erro na exclusão em massa:",error);this.ui.showAlert("Erro na exclusão: "+error.message,"danger")}}hideRecordForm(){const recordForm=document.getElementById("recordForm");if(recordForm){recordForm.style.display="none"}this.editingRowId=null;document.querySelectorAll(".is-invalid").forEach(el=>el.classList.remove("is-invalid"));document.querySelectorAll(".invalid-feedback").forEach(el=>el.textContent="")}updateApiUrl(){const select=document.getElementById("apiUrlSelect");const input=document.getElementById("apiUrl");if(select&&input&&select.value!=="custom"){input.value=select.value}}toggleTokenVisibility(){const tokenInput=document.getElementById("apiToken");const eyeIcon=document.getElementById("tokenEye");if(tokenInput&&eyeIcon){if(tokenInput.type==="password"){tokenInput.type="text";eyeIcon.className="fas fa-eye-slash"}else{tokenInput.type="password";eyeIcon.className="fas fa-eye"}}}openBaserowDocs(){const currentSite=this.api.currentSite;const urls={oficial:"https://baserow.io/docs/user-documentation/api-tokens",vps:"#"};window.open(urls[currentSite]||urls.oficial,"_blank")}goToPage(page){if(page===this.ui.currentPage||!this.currentTable)return;this.ui.fetchRecords(page)}refreshTable(){if(this.currentTable){this.ui.refreshTable()}}searchRecords(){this.ui.searchRecords()}toggleConfig(){return this.ui.toggleConfig()}testConnection(){return this.ui.testConnection()}quickTest(){return this.ui.quickTest()}}const baserowManager=new BaserowManager;if(document.readyState==="loading"){document.addEventListener("DOMContentLoaded",()=>baserowManager.init())}else{baserowManager.init()}export default baserowManager;window.baserowManager=baserowManager;